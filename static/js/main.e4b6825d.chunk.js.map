{"version":3,"sources":["components/Square.js","components/Board.js","game_logic.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","src_components_Square","squares","renderSquare","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","status","_this2","current","winner","moves","map","move","desc","key","jumpTo","src_components_Board","handleClick","newGame","App","src_components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4b6825d.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.scss';\n\nconst Square = props => (\n  <button className=\"square\" onClick={props.onClick}>\n    {props.value}\n  </button>\n)\n\n  export default Square;","import React, { Component } from 'react';\nimport './Board.scss';\nimport Square from './Square';\n\nclass Board extends Component {\n  renderSquare(i) {\n    return(\n      <Square \n        value={this.props.squares[i]} \n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Board;\n","const calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\nexport default calculateWinner;","import React, { Component } from 'react';\nimport './Game.scss';\nimport Board from './Board';\nimport calculateWinner from '../game_logic';\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    }\n  }\n  \n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if(calculateWinner(squares) || squares[i]) return;\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  newGame() {\n    this.setState({\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    })\n  }\n\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n\n      const moves = history.map((step, move) => {\n        const desc = `Go to move #${move}`;\n        return(\n          <li key={move}>\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n      });\n\n      let status;\n      if(winner) {\n        status = `Выиграл: ${winner}`;\n      } else {\n        status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n      }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n            <button className=\"newGame-btn\" onClick={() => this.newGame()}>New Game</button>\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ul>{moves}</ul>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Game;","import React, { Component } from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\nclass App extends Component {\n\n    render() {\n      return (\n         <div className=\"App\">\n           <Game /> \n         </div>\n      );\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n     <App />, \n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}